#!/usr/bin/env bash

set -e

start() {
  verify "${@}"
  info
  download
  configure

  line
  say Launching runner with run.sh ...
  line
  cd $RUNNER_FOLDER
  ./run.sh
}
welcome() {
  say "GitHub Runner | ${RUNNER_SCRIPT_PATH}"
  say Welcome! This script will:
  say 1. Install Runner
  say 2. Configure Runner
  say 3. Run Runner
}
info() {
  say "Download path: ${RUNNER_FOLDER}"
  say "This script: ${RUNNER_SCRIPT_PATH}"
  say "Current Dir: ${CALLER_SCRIPT_DIR}"
  say "Environment File: ${RUNNER_SCRIPT_ENV_FILE} ${RUNNER_SCRIPT_ENV_FILE_STATUS}"
  line
  say "Runner Name: ${RUNNER_CONFIG_NAME}"
  say "Repo: ${RUNNER_URL_REPO}"
  say "Labels: ${RUNNER_CONFIG_LABELS}"
  say "Status: ${RUNNER_URL_RUNNERS}"
}
verify() {
  CALLER_SCRIPT_DIR=$(pwd)
  RUNNER_SCRIPT_ENV_FILE="${CALLER_SCRIPT_DIR}/.env"
  if [[ -f "${RUNNER_SCRIPT_ENV_FILE}" ]]; then
    source $RUNNER_SCRIPT_ENV_FILE
  else
    RUNNER_SCRIPT_ENV_FILE_STATUS="(Not found)"
  fi

  # Detect composer usage.
  if [[ -z "$COMPOSER_RUNTIME_BIN_DIR" ]]; then
    RUNNER_SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  else
    RUNNER_SCRIPT_PATH="$COMPOSER_RUNTIME_BIN_DIR"
  fi
  RUNNER_SCRIPT_DIR=$(dirname $RUNNER_SCRIPT_PATH)

  # Defaults. If ENV vars exist, use them. If not, use these values.
  RUNNER_PATH=${RUNNER_PATH:-"runner"}
  RUNNER_CONFIG_NAME=${RUNNER_CONFIG_NAME:-$(whoami)@$(hostname -f)}
  RUNNER_CONFIG_LABELS=${RUNNER_CONFIG_LABELS:-"runner.sh"}

  # Command line Options
  while [ $# -gt 0 ]; do
      case "$1" in
          --runner-path=*)
              RUNNER_PATH="${1#*=}"
              ;;

          --cleanup-runner)
              RUNNER_CLEANUP="yes"
              ;;

          --token=*)
              GITHUB_TOKEN="${1#*=}"
              ;;

          --repo=*)
              GITHUB_REPO="${1#*=}"
              ;;

          --name=*)
              RUNNER_CONFIG_NAME="${1#*=}"
              ;;
          --labels=*)
              RUNNER_CONFIG_LABELS="${1#*=}"
              ;;
      esac
      shift $(( $# > 0 ? 1 : 0 ))
  done

  # Helpful URLs
  RUNNER_URL_REPO="https://github.com/${GITHUB_REPO}"
  RUNNER_URL_RUNNERS="${RUNNER_URL_REPO}/settings/actions/runners"

  line
  welcome

  if [[ -z "${GITHUB_REPO}" ]]; then
    line
    say GITHUB_REPO is required. Use --repo or set the environment variable.
    exit 1
  fi

  # Add name to labels.
  RUNNER_CONFIG_LABELS="${RUNNER_CONFIG_LABELS},${RUNNER_CONFIG_NAME}"

  # Gather API token to create runners.
  if [[ -z "${GITHUB_TOKEN}" ]]; then
    line
    say GITHUB_TOKEN is required. Use --token or set the environment variable.
    say Create a 'Personal Access Token' owned by the organization, with 'admin:write' access on this repository
    say https://github.com/settings/personal-access-tokens/new
    line
    exit 1
  fi

  # Prepare runner dir.
  line
  if [[ ! -d $RUNNER_PATH ]]; then
    mkdir -p $RUNNER_PATH
    RUNNER_FOLDER=$(realpath $RUNNER_PATH)
    say Created folder: $RUNNER_FOLDER
  else
    RUNNER_FOLDER=$(realpath $RUNNER_PATH)
    say Found folder: $RUNNER_FOLDER
  fi

  # getNewToken.
  line
  RESPONSE=$(curl -L \
    -X POST \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: Bearer ${GITHUB_TOKEN}" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    https://api.github.com/repos/${GITHUB_REPO}/actions/runners/registration-token \
  )
  RUNNER_CONFIG_TOKEN=$(echo $RESPONSE | jq -r .token)
  if [[ "${RUNNER_CONFIG_TOKEN}" == "null" ]]; then
    line
    info
    line
    say Unable to get registration token. Check GITHUB_TOKEN and GITHUB_REPO and try again.
    say https://github.com/settings/tokens
    line
    say $RESPONSE
    line
    exit 1
  fi
}
download() {

  cd ${RUNNER_FOLDER}
  TAR_PATH="${RUNNER_FOLDER}/actions-runner.tar.gz"
  if [[ ! -f $TAR_PATH ]]; then
    line
    say "Downloading runner tarball to ${TAR_PATH}..."
    curl -o ${TAR_PATH} -L https://github.com/actions/runner/releases/download/v2.320.0/actions-runner-linux-x64-2.320.0.tar.gz
  else
    line
    say "Found runner tarball at ${TAR_PATH}..."
  fi
  CONFIG_PATH="${RUNNER_FOLDER}/config.sh"
  if [[ ! -f $CONFIG_PATH ]]; then
    line
    say Extracting ${TAR_PATH}
    tar xzf ${TAR_PATH}
    say "Runner extracted to ${RUNNER_FOLDER}."
  fi
  cd ${OLDPWD}
}
configure() {
  line
  say Configuring GitHub runner...
  say Removing existing runner...

  # Remove
  cd $RUNNER_FOLDER
  ./config.sh remove --token ${RUNNER_CONFIG_TOKEN} || say "config remove didn't work."

  line
  say Configuring new runner...

  # Configure
  ./config.sh \
    --token ${RUNNER_CONFIG_TOKEN} \
    --name ${RUNNER_CONFIG_NAME} \
    --url ${RUNNER_URL_REPO} \
    --labels ${RUNNER_CONFIG_LABELS} \
    --replace \
    --unattended

  line
  say GitHub runner configured:
  info

}

stop() {
  say "Stopped."
  ./config.sh remove --token ${RUNNER_CONFIG_TOKEN} || say "config remove didn't work."

  exit 0
}
cancel() {
  echo
  if [[ "${RUNNER_CLEANUP}" == "yes" ]]; then
    say "Cancelled. Removing $RUNNER_FOLDER..."
    rm -rf $RUNNER_FOLDER
  else
    say "Cancelled. The folder $RUNNER_FOLDER was not deleted."
  fi

  ./config.sh remove --token ${RUNNER_CONFIG_TOKEN} || say "config remove didn't work."

  exit 1
}
say() {
  echo " github-runner | ${*}"
}
line() {
  CHARACTER="${CHARACTER:--}"
  COLUMNS="${COLUMNS:-$(tput cols -T xterm)}"
  printf '%*s\n' "${COLUMNS}" '' | tr ' ' "${CHARACTER}"
}

# Set up signal trap
trap stop SIGTERM
trap cancel SIGINT

start "${@}"
